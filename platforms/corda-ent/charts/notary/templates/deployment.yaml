---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  {{- if .Values.deployment.annotations }}
  annotations:
{{ toYaml .Values.deployment.annotations | indent 8 }}
    {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-checkregistration
        image: {{ .Values.image.initContainerName }}
        imagePullPolicy: Always
        env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.vault.certsecretprefix }}
        command: ["sh", "-c"]
        args:
        - |-
            #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
              }

            # setting up env to get secrets from vault
            echo "Getting secrets from Vault Server"
            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"vault-role","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
            echo "logged into vault"
            
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
            do
                # get truststore from vault to see if registration is done or not
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs/truststore | jq -r 'if .errors then . else . end')
                if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
                then
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                else
                  break
                fi 
                COUNTER=`expr "$COUNTER" + 1`
            done

            if [ "$COUNTER" -ge {{ $.Values.healthcheck.readinessthreshold }} ]
            then
              # printing number of trial done before giving up
              echo "$COUNTER"
              echo "Node registration might not have been done."
              exit 1
            fi
            echo "Done"
      - name: init-certificates
        image: {{ .Values.image.initContainerName }}
        imagePullPolicy: Always
        env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: BASE_DIR
            value: {{ $.Values.volume.baseDir }}
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.vault.certsecretprefix }}
          - name: NODEINFO_MOUNT_PATH
            value: "/notary-nodeinfo"                          
        command: ["sh", "-c"]
        args:
        - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
              if echo ${2} | grep "errors"; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
              fi
              }
              # setting up env to get secrets from vault
              echo "Getting secrets from Vault Server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"vault-role","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"

              OUTPUT_PATH=${BASE_DIR}/certificates
              
              # Getting intitial network parameters from Vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
              do 
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.notaryName }}/nparam | jq -r 'if .errors then . else . end')
                if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
                  then
                    sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                  else
                   initial_param=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["network-parameters-initial"]')
                   echo "${initial_param}" | base64 -d > ${NODEINFO_MOUNT_PATH}/network-parameters-initial.conf
                   echo "Successfully got initial network parameters"
                   break
                fi
                COUNTER=`expr "$COUNTER" + 1`
              done

              # Getting node Info File from Vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
              do 
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.notaryName }}/nodeInfo | jq -r 'if .errors then . else . end')
                if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
                  then
                    sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                  else
                  notary_nodeinfo=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["nodeInfoFile"]')
                  echo "${notary_nodeinfo}" | base64 -d > ${NODEINFO_MOUNT_PATH}/notary_nodeinfo
                  echo "Successfully got node info file"
                  break
                fi
                COUNTER=`expr "$COUNTER" + 1`
              done

              # get nodekeystore.jks from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs/nodekeystore | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/nodekeystore)" "${LOOKUP_SECRET_RESPONSE}"
              TLS_NODEKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["nodekeystore.jks"]')
              echo "${TLS_NODEKEYSTORE}" | base64 -d > ${OUTPUT_PATH}/nodekeystore.jks

              # get sslkeystore.jks from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs/sslkeystore | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/sslkeystore)" "${LOOKUP_SECRET_RESPONSE}"
              TLS_SSLKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["sslkeystore.jks"]')
              echo "${TLS_SSLKEYSTORE}" | base64 -d > ${OUTPUT_PATH}/sslkeystore.jks

              # get truststore.jks from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs/truststore | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/truststore)" "${LOOKUP_SECRET_RESPONSE}"
              TLS_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["truststore.jks"]')
              echo "${TLS_TRUSTSTORE}" | base64 -d > ${OUTPUT_PATH}/truststore.jks              
              echo "Done"
        volumeMounts:
        - name: notary-certificates
          mountPath: {{ $.Values.volume.baseDir }}/certificates
        - name: notary-nodeinfo
          mountPath: /notary-nodeinfo
      containers:
      - name: notary
        image: "{{ required "notary[main]: missing value for .Values.dockerImage.name" .Values.dockerImage.name }}:{{ required "notary[main]: missing value for .Values.dockerImage.tag" .Values.dockerImage.tag }}"
        imagePullPolicy: {{ .Values.dockerImage.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cp CM-FILES/notary.conf etc/
          cp CM-FILES/*.sh bin/
          chmod +x bin/*
          bin/run.sh
        volumeMounts:
        - name: notary-conf
          mountPath: /opt/corda/CM-FILES/notary.conf
          subPath: notary.conf
        - name: notary-conf
          mountPath: /opt/corda/CM-FILES/run.sh
          subPath: run.sh
        - name: notary-etc
          mountPath: /opt/corda/etc
        - name: notary-certificates
          mountPath: /opt/corda/certificates
        - name: notary-logs
          mountPath: /opt/corda/logs
        - name: notary-h2
          mountPath: /opt/corda/h2
        - name: notary-nodeinfo
          mountPath: /opt/corda/notary-nodeinfo
        resources:
          requests:
            memory: {{ .Values.cordaJarMx }}G
          limits:
            memory: {{ add .Values.cordaJarMx 2 }}G
      - name: logs
        image: "{{ required "notary[logs]: missing value for .Values.dockerImage.name" .Values.dockerImage.name }}:{{ required "notary[logs]: missing value for .Values.dockerImage.tag" .Values.dockerImage.tag }}"
        imagePullPolicy: {{ .Values.dockerImage.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cd /opt/corda/
          while true; do tail -f logs/*.log 2>/dev/null; sleep 5; done
          # in case sth went wrong just wait indefinitely ...
          tail -f /dev/null
        volumeMounts:
        - name: notary-logs
          mountPath: /opt/corda/logs
      imagePullSecrets:
      - name: {{ .Values.dockerImage.imagePullSecret }}
      volumes:
      - name: notary-conf
        configMap:
          name: {{ .Values.nodeName }}-conf
      - name: notary-etc
        persistentVolumeClaim:
          claimName: {{ .Values.nodeName }}-etc
      - name: notary-certificates
        emptyDir:
          medium: Memory
      - name: notary-logs
        persistentVolumeClaim:
          claimName: {{ .Values.nodeName }}-logs
      - name: notary-nodeinfo
        emptyDir:
          medium: Memory
      - name: notary-h2
        persistentVolumeClaim:
          claimName: {{ .Values.nodeName }}-h2
