# This role generates certificates for ambassador
# and places them in vault. Certificates are created using openssl
# This also creates the corresponding Kubernetes secret
---
# check if the ambassador tls directory exists
- name: "Check if the ambassador directory exists or not"
  stat:
    path: "./build/ambassador/{{ org.services.networkmap.name }}"
  register: ambassadordir_check

# Create the ambassador directory if it doesn't exist
- name: "Create the ambassador directory if it doesn't exist"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "ensure_dir"
    path: "./build/ambassador/{{ org.services.networkmap.name }}"
  when: not ambassadordir_check.stat.exists

# Check if the ambassador tls is already created
- name: Check if the ambassador tls is already created
  shell: |
    vault kv get -format=yaml secret/{{ org.name | lower }}/{{ org.services.networkmap.name }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs
  ignore_errors: yes

# Get the ambassador certs if they exist
- name: Get the ambassador certs if they exist in the vault
  include_role:
    name: "{{ playbook_dir }}/roles/setup/get_crypto"
  vars:
    vault_output: "{{ ambassador_tls_certs.stdout | from_yaml }}"
    type: "ambassador"
    cert_path: "./build/ambassador/{{ org.services.networkmap.name }}"
  when: ambassador_tls_certs.failed == False

# Check if ambassadortls dir is there
- name: "check if openssl conf file exists or not"
  stat:
    path: "./build/openssl{{ org.services.networkmap.name }}.conf"
  register: openssl_conf_check

# Generates the openssl file for domain
- name: Generate openssl conf file
  shell: |
    cd ./build/ambassador/{{ org.services.networkmap.name }}
    cat <<EOF >openssl{{ org.services.networkmap.name }}.conf
    [dn]
    CN={{ domain_name }}
    [req]
    distinguished_name = dn
    [EXT]
    subjectAltName=DNS:{{ domain_name }}
    keyUsage=digitalSignature
    extendedKeyUsage=serverAuth
    EOF
  vars:
    domain_name: "{{ org.services.networkmap.name }}.{{ org.external_url_suffix }}"
  when: not openssl_conf_check.stat.exists and ambassador_tls_certs.failed == True


# Get the subordinate-ca keystore from the vault
# This task should end the playbook as failed if the certificate isn't present,
# as this certificate is created by the generate-pki chart
- name: Get the subordinateCA certs if they exist in the vault
  shell: |
    vault read -field=subordinate-key-store.jks secret/{{ org.name | lower }}/root/certs
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: subordinateca
  when: ambassador_tls_certs.failed == True

# Check if the rootca.jks is already present or not
- name: Check if rootca.jks is present
  stat:
    path: "./build/ambassador/{{ org.services.networkmap.name }}/rootca.jks"
  register: check_rootcajks

# Store the rootca.jks in build folder if it doesn't exist
- name: Store the keystore in a file
  copy:
    content: "{{ subordinateca.stdout | b64decode }}"
    dest: "./build/ambassador/{{ org.services.networkmap.name }}/rootca.jks"
  when: not check_rootcajks.stat.exists and ambassador_tls_certs.failed == True

# Create ambassador certificates
- name: Create ambassador certificates
  shell: |
    cd ./build/ambassador/{{ org.services.networkmap.name }}
    keytool -importkeystore -srckeystore rootca.jks -destkeystore rootca.p12 -deststoretype PKCS12 -srcalias subordinateca -deststorepass password -srcstorepass password
    keytool -export -alias subordinateca -keystore rootca.jks -rfc -file rootca.pem -storepass password
    openssl pkcs12 -in rootca.p12  -nodes -nocerts -out key.pem -passin pass:'password'
    openssl ecparam -name prime256v1 -genkey -noout -out ambassador.key
    openssl req -new -nodes -key ambassador.key -days 1000 -out ambassador.csr -extensions EXT -subj "/CN={{ org.services.networkmap.name}}.{{ org.external_url_suffix }}" -config "openssl{{ org.services.networkmap.name }}.conf"
    openssl x509 -extfile {{ playbook_dir }}/openssl.conf -req -days 1000 -in ambassador.csr -CA rootca.pem -CAkey key.pem -out ambassador.pem -set_serial 01 -extensions v3_nonca
  when: ambassador_tls_certs.failed == True

# Store the ambassador certificates into the vault
- name: Store the ambassador certs to vault
  shell: |
    vault kv put secret/{{ org.name | lower }}/{{ org.services.networkmap.name }}/tlscerts tlscacerts="$(cat ./build/ambassador/{{ org.services.networkmap.name }}/ambassador.pem | base64)" tlskey="$(cat ./build/ambassador/{{ org.services.networkmap.name }}/ambassador.key | base64)"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: ambassador_tls_certs.failed == True

# Check if the ambassador secret is created in the default namespace
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: default
    name: "{{ org.services.networkmap.name }}-ambassador-certs"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
  register: get_ambassador_secret

# Create the ambassador secret if it doesn't exist
- name: Create the ambassador credentials
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} kubectl create secret tls {{ org.services.networkmap.name }}-ambassador-certs --cert="./build/ambassador/{{ org.services.networkmap.name }}/ambassador.pem" --key="./build/ambassador/{{ org.services.networkmap.name }}/ambassador.key" -n default
  when: get_ambassador_secret.resources|length == 0
